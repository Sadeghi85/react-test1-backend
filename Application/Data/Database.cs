// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Application.Data
{
    #region Database context interface

    public interface IApplicationDbContext : IDisposable
    {
        DbSet<TblContact> TblContacts { get; set; } // tblContact
        DbSet<TblRefreshToken> TblRefreshTokens { get; set; } // tblRefreshToken

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    public class ApplicationDbContext : DbContext, IApplicationDbContext
    {
        public ApplicationDbContext()
        {
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<TblContact> TblContacts { get; set; } // tblContact
        public DbSet<TblRefreshToken> TblRefreshTokens { get; set; } // tblRefreshToken

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=172.16.16.50; Initial Catalog=DB_PhoneBook_V2;User ID=usrPhoneBook_V2;Password=123@qwe;MultipleActiveResultSets=False;TrustServerCertificate=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new TblContactConfiguration());
            modelBuilder.ApplyConfiguration(new TblRefreshTokenConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class ApplicationDbContextFactory : IDesignTimeDbContextFactory<ApplicationDbContext>
    {
        public ApplicationDbContext CreateDbContext(string[] args)
        {
            return new ApplicationDbContext();
        }
    }

    #endregion

    #region POCO classes

    // tblContact
    public class TblContact
    {
        public int Id { get; set; } // ID (Primary key)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Email { get; set; } // Email (length: 100)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 100)
    }

    // tblRefreshToken
    public class TblRefreshToken
    {
        public int Id { get; set; } // ID (Primary key)
        public string PreferredUsername { get; set; } // PreferredUsername (length: 50)
        public string RefreshToken { get; set; } // RefreshToken (length: 500)
        public DateTime Expires { get; set; } // Expires
    }


    #endregion

    #region POCO Configuration

    // tblContact
    public class TblContactConfiguration : IEntityTypeConfiguration<TblContact>
    {
        public void Configure(EntityTypeBuilder<TblContact> builder)
        {
            builder.ToTable("tblContact", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tblContact").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
        }
    }

    // tblRefreshToken
    public class TblRefreshTokenConfiguration : IEntityTypeConfiguration<TblRefreshToken>
    {
        public void Configure(EntityTypeBuilder<TblRefreshToken> builder)
        {
            builder.ToTable("tblRefreshToken", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tblRefreshToken").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PreferredUsername).HasColumnName(@"PreferredUsername").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.RefreshToken).HasColumnName(@"RefreshToken").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Expires).HasColumnName(@"Expires").HasColumnType("datetime").IsRequired();
        }
    }


    #endregion

}
// </auto-generated>
